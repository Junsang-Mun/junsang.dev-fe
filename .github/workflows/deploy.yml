name: Deploy to VM

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    environment: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Deploy to VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: deploy
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Load the shell profile explicitly
            source ~/.profile
            source ~/.bashrc

            # If using NVM, explicitly load it
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            # Check if tools are available now
            echo "Node.js version:"
            node --version
            echo "npm version:"
            npm --version
            echo "PM2 version:"
            which pm2 && pm2 --version

            # Create deployment directory structure if it doesn't exist
            mkdir -p ~/blog/prisma

            # Create SQLite database file if it doesn't exist
            touch ~/blog/prisma/database.db

            # Ensure proper permissions
            chmod 755 ~/blog
            chmod 755 ~/blog/prisma
            chmod 644 ~/blog/prisma/database.db

            # Create a temp directory for the deployment
            DEPLOY_TEMP_DIR=$(mktemp -d)

            # Clone the repository to the temp directory
            # For public repositories:
            cd $DEPLOY_TEMP_DIR
            git clone --depth 1 https://github.com/Junsang-Mun/junsang.dev-fe.git .

            # For private repositories, use a token:
            # git clone --depth 1 https://${{ secrets.GH_TOKEN }}@github.com/Junsang-Mun/junsang.dev-fe.git .

            # Install production dependencies
            npm ci --production

            # Generate Prisma client
            npx prisma generate

            # Stop the running application (if exists)
            pm2 stop blog || true

            # Create backup of the database
            TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
            mkdir -p ~/backups
            cp ~/blog/prisma/database.db ~/backups/database_backup_$TIMESTAMP.db

            # Copy the new code, preserving the database file
            rsync -av --exclude='.git' --exclude='node_modules' --exclude='prisma/database.db' --exclude='.env' ./ ~/blog/

            # Set up .env file if it doesn't exist (first deployment)
            if [ ! -f ~/blog/.env ]; then
              cat > ~/blog/.env << EOL
            DATABASE_URL="file:./prisma/database.db"
            PORT=3000
            NODE_ENV=production
            EOL
            fi

            # Navigate to app directory and install dependencies
            cd ~/blog
            npm ci --production

            # Run database migrations (using Prisma)
            npx prisma migrate deploy

            # Start the application with PM2
            # For SvelteKit with adapter-node, use the index.js file in the build directory
            pm2 start build/index.js --name "blog" -- --port 3000

            # Alternative for package.json scripts
            # pm2 start npm --name "blog" -- run start

            # Save PM2 process list
            pm2 save

            # Clean up
            rm -rf $DEPLOY_TEMP_DIR

            echo "Deployment completed successfully!"

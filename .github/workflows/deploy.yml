name: Deploy to VM

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment directories
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} "mkdir -p ~/blog/prisma ~/backups"

      - name: Backup database if exists
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} "if [ -f ~/blog/prisma/database.db ]; then cp ~/blog/prisma/database.db ~/backups/database_backup_\$(date +%Y%m%d_%H%M%S).db; fi"

      - name: Deploy files with rsync
        run: |
          # Transfer files directly from runner to server
          rsync -avz --exclude='.git' --exclude='node_modules' --exclude='prisma/database.db' --exclude='.env' ./ deploy@${{ secrets.SSH_HOST }}:~/blog/

      - name: Run post-deployment commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: deploy
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Load environment
            source ~/.profile
            source ~/.bashrc
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            # Print debug info
            echo "Node.js version:"
            node --version
            echo "npm version:"
            npm --version

            # Create SQLite database file if it doesn't exist
            touch ~/blog/prisma/database.db
            chmod 644 ~/blog/prisma/database.db

            # Set up .env file if it doesn't exist
            if [ ! -f ~/blog/.env ]; then
              cat > ~/blog/.env << EOL
            DATABASE_URL="file:./prisma/database.db"
            PORT=3000
            NODE_ENV=production
            EOL
            fi

            # Navigate to app directory
            cd ~/blog

            # Install dependencies using npm install instead of npm ci
            echo "Installing dependencies..."
            npm install --omit=dev

            # Generate Prisma client
            echo "Generating Prisma client..."
            npx prisma generate

            # Run database migrations
            echo "Running database migrations..."
            npx prisma migrate deploy

            # Start the application with PM2
            echo "Starting application with PM2..."
            pm2 stop blog || echo "No existing blog process to stop"
            pm2 start build/index.js --name "blog"
            pm2 save

            echo "Deployment completed successfully!"

name: Deploy to VM

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Create deployment package
        run: |
          # Create a tar file with the application (excluding unnecessary files)
          tar --exclude='.git' --exclude='node_modules' --exclude='.env' -czf deployment.tar.gz .

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          # Test SSH connection - this will fail the workflow if SSH connection fails
          ssh -o StrictHostKeyChecking=accept-new deploy@${{ secrets.SSH_HOST }} "echo 'SSH connection successful'"

      - name: Deploy to server - Step 1 (Transfer files)
        run: scp deployment.tar.gz deploy@${{ secrets.SSH_HOST }}:~/deployment.tar.gz

      - name: Deploy to server - Step 2 (Prepare directories)
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} "mkdir -p ~/blog/prisma ~/backups"

      - name: Deploy to server - Step 3 (Backup database)
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} "if [ -f ~/blog/prisma/database.db ]; then cp ~/blog/prisma/database.db ~/backups/database_backup_\$(date +%Y%m%d_%H%M%S).db; fi"

      - name: Deploy to server - Step 4 (Extract files)
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} "tar -xzf ~/deployment.tar.gz -C ~/blog --exclude='prisma/database.db'"

      - name: Deploy to server - Step 5 (Setup files)
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} "
            touch ~/blog/prisma/database.db &&
            chmod 644 ~/blog/prisma/database.db &&
            if [ ! -f ~/blog/.env ]; then
              echo 'DATABASE_URL=\"file:./prisma/database.db\"' > ~/blog/.env &&
              echo 'PORT=3000' >> ~/blog/.env &&
              echo 'NODE_ENV=production' >> ~/blog/.env;
            fi
          "

      - name: Deploy to server - Step 6 (Install dependencies)
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} "cd ~/blog && source ~/.profile && source ~/.bashrc && export NVM_DIR=\"\$HOME/.nvm\" && [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\" && npm install --omit=dev"

      - name: Deploy to server - Step 7 (Generate Prisma client)
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} "cd ~/blog && source ~/.profile && source ~/.bashrc && export NVM_DIR=\"\$HOME/.nvm\" && [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\" && npx prisma generate"

      - name: Deploy to server - Step 8 (Run migrations)
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} "cd ~/blog && source ~/.profile && source ~/.bashrc && export NVM_DIR=\"\$HOME/.nvm\" && [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\" && npx prisma migrate deploy"

      - name: Deploy to server - Step 9 (Start application)
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} "cd ~/blog && source ~/.profile && source ~/.bashrc && export NVM_DIR=\"\$HOME/.nvm\" && [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\" && pm2 stop blog || true && pm2 start build/index.js --name \"blog\" && pm2 save"

      - name: Deploy to server - Step 10 (Cleanup)
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} "rm ~/deployment.tar.gz"
